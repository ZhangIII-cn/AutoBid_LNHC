# Form implementation generated from reading ui file 'demo.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import Qt, QSize, QThread, pyqtSignal
from PyQt6.QtWidgets import (
    QApplication, QWidget, QPushButton, QMainWindow, QLabel, QHBoxLayout, QVBoxLayout, QLineEdit, QMessageBox,
    QFileDialog,QDialog)
from Mylib.Function_Spider_CCGP import *
from dialog import Ui_Dialog
from dialog_finish import Dialog_Finish
import threading

#---------------全局变量--------------------------------------------------------------------------------------------------------
Counter_Page_Finished=0
Counter_Page_Number=0
Flag_Finished_Spider=False
task_done_event = threading.Event()


class Thread_WriteFile(QThread):
    def __init__(self):
        QThread.__init__(self)


#---------------------------------------------------- 爬虫工作线程 --------------------------------------------------------
class Thread_Spider(QThread):
    Signal_Finish=pyqtSignal()
    Index_ProgressBar=pyqtSignal(int,int)

    def __init__(self,parent=None):
        super().__init__(parent)  #要首先调用父类的初始化方法
        # 从父类获取界面选项信息
        self.keyword_dict=parent.Data_Selection['keyword_dict']
        self.time_type=parent.Data_Selection['time_type']
        self.region_dict=parent.Data_Selection['region_dict']
        self.website_selection=parent.Website_Selection


    def run(self):
        for i in range(0,Counter_Page_Number):
            print(str(i) + '/' + str(Counter_Page_Finished))
            self.Index_ProgressBar.emit(i,Counter_Page_Number)
            # time.sleep(0.5)

        if self.website_selection == 1:
            Spider_Work_CCGP(self.keyword_dict,self.time_type,self.region_dict)
        self.Signal_Finish.emit() #Signal transferred to main thread.
        # task_done_event.set()



#---------------------------------------------------- 主窗口线程 --------------------------------------------------------
class Ui_MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super(Ui_MainWindow, self).__init__()
        self.setupUi(self)
        self.retranslateUi(self)
        self.Data_Selection={'keyword_dict':['无人机'],'time_type':1,'region_dict':['全部']}
        self.Website_Selection=1  # 1 -> CCGP
        self.CheckBox_All.clicked.connect(self.on_Checkbox_Changed_All_Selected)  # 多选框绑定点击事件：选择“全部”时其他选项全部取消，选择其他任意一项时自动取消“全部”选项
        self.CheckBox_BJ.toggled .connect(self.on_Checkbox_Changed_One_Selected)
        self.CheckBox_DL.toggled .connect(self.on_Checkbox_Changed_One_Selected)
        self.CheckBox_JL.toggled .connect(self.on_Checkbox_Changed_One_Selected)
        self.CheckBox_LN.toggled .connect(self.on_Checkbox_Changed_One_Selected)
        self.CheckBox_SD.toggled .connect(self.on_Checkbox_Changed_One_Selected)
        self.CheckBox_ZJ.toggled .connect(self.on_Checkbox_Changed_One_Selected)
        self.CheckBox_HLJ.toggled .connect(self.on_Checkbox_Changed_One_Selected)
        self.Count_CheckBox_Checked=1

    def click_start(self):
        #------------------------- 获取主窗口控件信息 -----------------------------------------------------------------------------------





        #----------------------- Show Dialog UI -------------------------------------------------------------------------------------------
        self.dialog = QDialog(self)
        self.ui = Ui_Dialog()
        self.ui.setupUi(self.dialog)
        self.dialog.show()
        #---------------------—— 多线程实现爬虫功能与QT进度条的同步 -----------------------------------------------------------------------------
        self.thread=Thread_Spider(parent=self)
        self.thread.Signal_Finish.connect(self.on_Thread_Spider_Finished)
        self.thread.Index_ProgressBar.connect(self.on_Thread_Data_Changed)
        self.thread.start()
        # task_done_event.wait()

    def on_Thread_Spider_Finished(self): #完成爬虫线程后调用
        # print("Spider Finished!")
        self.dialog_finish=QDialog(self)
        self.ui_dialog_finish = Dialog_Finish()
        self.ui_dialog_finish.setupUi(self.dialog_finish)
        self.ui_dialog_finish.Signal_Close_Dialog.connect(self.Close_Finish_Dialog)
        self.dialog_finish.show()
        # self.dialog_finish.close()

    def on_Thread_Spider_Error(self):  #处理爬虫过程中的错误信息
        print("error")

    def on_Thread_Data_Changed(self,index,value): # 同步更新子Dialog窗口中的进度条
        My_Dialog=self.ui
        if value == 0:
            My_Dialog.ProgressBar_Update(0, 0)
        else:
            My_Dialog.ProgressBar_Update(index,value)

    def Close_Finish_Dialog(self):  #按确认键关闭提示窗口,同时关闭两个窗口
        # print("emited!")
        self.dialog_finish.close()
        self.dialog.close()

    #-------------------多选框Checkbox : 为了保证始终有一个选项，要求实现：当最后一个checked项为“全选”时，该项不能取消;如果最后一个选项为任意项时，取消后默认选择“全选”----------------------------
    def on_Checkbox_Changed_All_Selected(self):  #选中多选框的“全选”时，将其他所有选项都设为未选择。
        # print(self.CheckBox_All.isChecked())
        if self.CheckBox_All.isChecked() == False and self.Count_CheckBox_Checked == 1 :
            self.CheckBox_All.setChecked(True)
        else:
            print("all clear")

    def on_Checkbox_Changed_One_Selected(self):  #选中多选框的任意一项时，将“全选”选项设为未选择
        if self.sender().isChecked() == False:
            self.Count_CheckBox_Checked -= 1
            if self.Count_CheckBox_Checked == 0:
                self.CheckBox_All.setChecked(True)
                self.Count_CheckBox_Checked += 1
        else : #选中
            self.Count_CheckBox_Checked += 1
            if self.CheckBox_All.isChecked()==True:
                self.CheckBox_All.setChecked(False)
                self.Count_CheckBox_Checked -= 1



    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setWindowModality(QtCore.Qt.WindowModality.WindowModal)
        MainWindow.resize(865, 576)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(0, 0))
        MainWindow.setDocumentMode(False)
        MainWindow.setTabShape(QtWidgets.QTabWidget.TabShape.Rounded)
        MainWindow.setDockOptions(QtWidgets.QMainWindow.DockOption.AllowTabbedDocks|QtWidgets.QMainWindow.DockOption.AnimatedDocks)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(parent=self.centralwidget)
        self.label.setGeometry(QtCore.QRect(100, 90, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(False)
        self.label.setFont(font)
        self.label.setWordWrap(False)
        self.label.setObjectName("label")
        self.comboBox = QtWidgets.QComboBox(parent=self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(200, 90, 260, 31)) #左上角坐标（x,y),宽,高
        font = QtGui.QFont()
        font.setPointSize(12)
        self.comboBox.setFont(font)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.label_2 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(110, 160, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(False)
        self.label_2.setFont(font)
        self.label_2.setWordWrap(False)
        self.label_2.setObjectName("label_2")
        self.horizontalLayoutWidget = QtWidgets.QWidget(parent=self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(200, 150, 131, 51))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.Button_AddWord = QtWidgets.QPushButton(parent=self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Maximum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Button_AddWord.sizePolicy().hasHeightForWidth())
        self.Button_AddWord.setSizePolicy(sizePolicy)
        self.Button_AddWord.setMinimumSize(QtCore.QSize(100, 0))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Button_AddWord.setFont(font)
        self.Button_AddWord.setObjectName("Button_AddWord")
        self.horizontalLayout.addWidget(self.Button_AddWord)
        self.label_3 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(100, 230, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(False)
        self.label_3.setFont(font)
        self.label_3.setWordWrap(False)
        self.label_3.setObjectName("label_3")
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(parent=self.centralwidget)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(200, 220, 431, 51))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.radio_1 = QtWidgets.QRadioButton(parent=self.horizontalLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.radio_1.setFont(font)
        self.radio_1.setObjectName("radio_1")
        self.horizontalLayout_2.addWidget(self.radio_1)
        self.radio_2 = QtWidgets.QRadioButton(parent=self.horizontalLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.radio_2.setFont(font)
        self.radio_2.setObjectName("radio_2")
        self.horizontalLayout_2.addWidget(self.radio_2)
        self.radio_3 = QtWidgets.QRadioButton(parent=self.horizontalLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.radio_3.setFont(font)
        self.radio_3.setObjectName("radio_3")
        self.horizontalLayout_2.addWidget(self.radio_3)
        self.radio_4 = QtWidgets.QRadioButton(parent=self.horizontalLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.radio_4.setFont(font)
        self.radio_4.setObjectName("radio_4")
        self.horizontalLayout_2.addWidget(self.radio_4)
        self.Button_Work = QtWidgets.QPushButton(parent=self.centralwidget)
        self.Button_Work.setGeometry(QtCore.QRect(360, 440, 131, 41))
        self.Button_Work.clicked.connect(self.click_start)   #绑定点击事件
        font = QtGui.QFont()
        font.setPointSize(12)
        self.Button_Work.setFont(font)
        self.Button_Work.setObjectName("Button_Work")
        self.label_4 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(100, 300, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(False)
        self.label_4.setFont(font)
        self.label_4.setWordWrap(False)
        self.label_4.setObjectName("label_4")
        self.gridLayoutWidget = QtWidgets.QWidget(parent=self.centralwidget)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(200, 290, 291, 96))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.gridLayoutWidget.setFont(font)
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.CheckBox_JL = QtWidgets.QCheckBox(parent=self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.CheckBox_JL.sizePolicy().hasHeightForWidth())
        self.CheckBox_JL.setSizePolicy(sizePolicy)
        self.CheckBox_JL.setMinimumSize(QtCore.QSize(60, 0))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.CheckBox_JL.setFont(font)
        self.CheckBox_JL.setObjectName("CheckBox_JL")
        self.gridLayout.addWidget(self.CheckBox_JL, 1, 2, 1, 1)
        self.CheckBox_ZJ = QtWidgets.QCheckBox(parent=self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.CheckBox_ZJ.sizePolicy().hasHeightForWidth())
        self.CheckBox_ZJ.setSizePolicy(sizePolicy)
        self.CheckBox_ZJ.setMinimumSize(QtCore.QSize(60, 0))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.CheckBox_ZJ.setFont(font)
        self.CheckBox_ZJ.setObjectName("CheckBox_ZJ")
        self.gridLayout.addWidget(self.CheckBox_ZJ, 1, 0, 1, 1)
        self.CheckBox_LN = QtWidgets.QCheckBox(parent=self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.CheckBox_LN.sizePolicy().hasHeightForWidth())
        self.CheckBox_LN.setSizePolicy(sizePolicy)
        self.CheckBox_LN.setMinimumSize(QtCore.QSize(50, 0))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.CheckBox_LN.setFont(font)
        self.CheckBox_LN.setObjectName("CheckBox_LN")
        self.gridLayout.addWidget(self.CheckBox_LN, 0, 1, 1, 1)
        self.CheckBox_HLJ = QtWidgets.QCheckBox(parent=self.gridLayoutWidget)
        self.CheckBox_HLJ.setMinimumSize(QtCore.QSize(60, 0))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.CheckBox_HLJ.setFont(font)
        self.CheckBox_HLJ.setObjectName("CheckBox_HLJ")
        self.gridLayout.addWidget(self.CheckBox_HLJ, 1, 3, 1, 1)
        self.CheckBox_DL = QtWidgets.QCheckBox(parent=self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.CheckBox_DL.sizePolicy().hasHeightForWidth())
        self.CheckBox_DL.setSizePolicy(sizePolicy)
        self.CheckBox_DL.setMinimumSize(QtCore.QSize(60, 0))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.CheckBox_DL.setFont(font)
        self.CheckBox_DL.setObjectName("CheckBox_DL")
        self.gridLayout.addWidget(self.CheckBox_DL, 0, 2, 1, 1)
        self.CheckBox_BJ = QtWidgets.QCheckBox(parent=self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.CheckBox_BJ.sizePolicy().hasHeightForWidth())
        self.CheckBox_BJ.setSizePolicy(sizePolicy)
        self.CheckBox_BJ.setMinimumSize(QtCore.QSize(50, 0))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.CheckBox_BJ.setFont(font)
        self.CheckBox_BJ.setObjectName("CheckBox_BJ")
        self.gridLayout.addWidget(self.CheckBox_BJ, 1, 1, 1, 1)
        self.CheckBox_SD = QtWidgets.QCheckBox(parent=self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Maximum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.CheckBox_SD.sizePolicy().hasHeightForWidth())
        self.CheckBox_SD.setSizePolicy(sizePolicy)
        self.CheckBox_SD.setMinimumSize(QtCore.QSize(60, 0))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.CheckBox_SD.setFont(font)
        self.CheckBox_SD.setObjectName("CheckBox_SD")
        self.gridLayout.addWidget(self.CheckBox_SD, 0, 3, 1, 1)
        self.CheckBox_All = QtWidgets.QCheckBox(parent=self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.CheckBox_All.sizePolicy().hasHeightForWidth())
        self.CheckBox_All.setSizePolicy(sizePolicy)
        self.CheckBox_All.setMinimumSize(QtCore.QSize(60, 0))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.CheckBox_All.setFont(font)
        self.CheckBox_All.setChecked(True)
        self.CheckBox_All.setObjectName("CheckBox_All")
        self.gridLayout.addWidget(self.CheckBox_All, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 865, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "翰诚科技标书自动化平台"))
        self.label.setText(_translate("MainWindow", "目标网站"))
        self.comboBox.setItemText(0, _translate("MainWindow", "中国政府采购网（CCGP）"))
        self.comboBox.setItemText(1, _translate("MainWindow", "辽宁省政府采购网（暂未开放）"))
        self.comboBox.setItemText(2, _translate("MainWindow", "云采通高校采购联盟（暂未开放）"))
        self.label_2.setText(_translate("MainWindow", "关键词"))
        self.Button_AddWord.setText(_translate("MainWindow", "添加搜索词"))
        self.label_3.setText(_translate("MainWindow", "时间范围"))
        self.radio_1.setText(_translate("MainWindow", "三天内"))
        self.radio_1.setChecked(True)
        self.radio_2.setText(_translate("MainWindow", "一周内"))
        self.radio_3.setText(_translate("MainWindow", "一月内"))
        self.radio_4.setText(_translate("MainWindow", "三月内"))
        self.Button_Work.setText(_translate("MainWindow", "开始获取"))
        self.label_4.setText(_translate("MainWindow", "搜索地区"))
        self.CheckBox_JL.setText(_translate("MainWindow", "吉林"))
        self.CheckBox_ZJ.setText(_translate("MainWindow", "浙江"))
        self.CheckBox_LN.setText(_translate("MainWindow", "辽宁"))
        self.CheckBox_HLJ.setText(_translate("MainWindow", "黑龙江"))
        self.CheckBox_DL.setText(_translate("MainWindow", "大连"))
        self.CheckBox_BJ.setText(_translate("MainWindow", "北京"))
        self.CheckBox_SD.setText(_translate("MainWindow", "山东"))
        self.CheckBox_All.setText(_translate("MainWindow", "全部"))

if __name__ == '__main__':
    app = QApplication([])
    window = Ui_MainWindow()
    window.show()
    app.exec()
    pass

